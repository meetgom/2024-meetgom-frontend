name: Move Issue to Done

on:
  pull_request:
    types: [closed]

permissions:
  contents: write

jobs:
  move-issue:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Authenticate using gh CLI
        run: echo "${{ secrets.MY_GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Move related issues to Done
        env:
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        run: |
          issue_numbers=$(jq -r '.pull_request.body | scan("#([0-9]+)")' < "$GITHUB_EVENT_PATH")

          for issue_number in $issue_numbers; do
            echo "Processing issue #$issue_number"

            # Find the project board
            project_query=$(cat <<EOF
            {
              "query": "query {
                repository(owner: \\"meetgom\\", name: \\"2024-meetgom-frontend\\") {
                  projectsV2(first: 1) {
                    nodes {
                      id
                    }
                  }
                }
              }"
            }
            EOF
            )
            project_response=$(curl -s -H "Authorization: token $MY_GITHUB_TOKEN" \
                                -X POST -d "$project_query" \
                                https://api.github.com/graphql)
            echo "Project response: $project_response"
            project_id=$(echo $project_response | jq -r '.data.repository.projectsV2.nodes[0].id')

            # Find the project item
            item_query=$(cat <<EOF
            {
              "query": "query {
                repository(owner: \\"meetgom\\", name: \\"2024-meetgom-frontend\\") {
                  issue(number: $issue_number) {
                    projectItems(first: 1) {
                      nodes {
                        id
                      }
                    }
                  }
                }
              }"
            }
            EOF
            )
            item_response=$(curl -s -H "Authorization: token $MY_GITHUB_TOKEN" \
                              -X POST -d "$item_query" \
                              https://api.github.com/graphql)
            echo "Item response: $item_response"
            item_id=$(echo $item_response | jq -r '.data.repository.issue.projectItems.nodes[0].id')

            # Move the project item to Done column
            mutation=$(cat <<EOF
            {
              "query": "mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: \\"$project_id\\",
                  itemId: \\"$item_id\\",
                  fieldValue: {
                    singleSelectOptionId: \\"98236657\\"
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }"
            }
            EOF
            )
            mutation_response=$(curl -s -H "Authorization: token $MY_GITHUB_TOKEN" \
                                -X POST -d "$mutation" \
                                https://api.github.com/graphql)
            echo "Mutation response: $mutation_response"
          done
